plugins {
    id "com.android.library"
    id "kotlin-android"
    id "maven-publish"
}

def loadLibVersion() {
    def props = loadProperties("$projectDir/version.properties")
    return props["version.name"]
}

def libVersion = loadLibVersion()

android {
    resourcePrefix "persona"

    compileSdkVersion versions.compileSdkVersion
    defaultConfig {
        minSdkVersion versions.minSdkVersion
        targetSdkVersion versions.targetSdkVersion
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    // Configure only for each module that uses Java 8
    // language features (either in its source code or
    // through dependencies).
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
        useIR = true
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion versions.compose
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }

    android.libraryVariants.all { variant ->
        variant.outputs.all { output ->
            if (output.outputFile != null && output.outputFileName.endsWith(".aar")) {
                outputFileName = "${archivesBaseName}-${libVersion}-${variant.name}.aar"
            }
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.coroutines}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutines}"

    // Jetpack Compose
    implementation "androidx.activity:activity-compose:${versions.composeActivity}"
    implementation "androidx.compose.ui:ui:${versions.compose}"
    implementation "androidx.compose.ui:ui-util:${versions.compose}"
    implementation "androidx.compose.material:material:${versions.compose}"
    implementation "androidx.compose.ui:ui-tooling:${versions.compose}"
    implementation "androidx.constraintlayout:constraintlayout-compose:${versions.composeConstraintLayout}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:${versions.composeLifecycleViewModel}"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:${versions.androidx.lifecycle}"

    testImplementation "androidx.test.ext:junit:${versions.androidx.junit}"
    testImplementation "junit:junit:${versions.jUnit}"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:${versions.kotlin}"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.coroutines}"
    testImplementation "org.mockito.kotlin:mockito-kotlin:${versions.mockitoKotlin}"
}

// Because the components are created only during the afterEvaluate phase, you must
// configure your publications using the afterEvaluate() lifecycle method.
afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                // Applies the component for the release build variant.
                from components.release

                // You can then customize attributes of the publication as shown below.
                groupId = "com.github.wangyung"
                artifactId = "persona"
                version = libVersion
            }
            // Creates a Maven publication called “debug”.
            debug(MavenPublication) {
                // Applies the component for the debug build variant.
                from components.debug

                groupId = "com.github.wangyung"
                artifactId = "persona-debug"
                version = libVersion
            }
        }
    }
}
